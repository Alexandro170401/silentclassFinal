{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useParams,useNavigate}from'react-router-dom';// Usamos useNavigate para redirigir\nimport'./Examen.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Examen(){const{id}=useParams();// Obtener el ID del curso desde la URL\nconst[preguntas,setPreguntas]=useState([]);// Estado para las preguntas del examen\nconst[respuestas,setRespuestas]=useState({});// Estado para las respuestas del usuario\nconst[curso,setCurso]=useState(null);// Estado para el curso (nombre y especialidad)\nconst[loading,setLoading]=useState(true);const[error,setError]=useState(null);const navigate=useNavigate();// Para redirigir después de enviar el examen\nuseEffect(()=>{fetchPreguntas();// Cargar las preguntas al montar el componente\nfetchCurso();// Cargar la información del curso (nombre y especialidad)\n},[id]);// Obtener las preguntas del examen\nconst fetchPreguntas=async()=>{try{const response=await fetch(\"\".concat(process.env.REACT_APP_API_URL,\"/api/examen/\").concat(id));if(!response.ok){throw new Error('Error al obtener las preguntas del examen');}const data=await response.json();setPreguntas(data.preguntas||[]);setLoading(false);}catch(error){console.error('Error fetching exam questions:',error);setError('Error al cargar las preguntas fsdfsfffd del examen');setLoading(false);}};// Obtener la información del curso (nombre y especialidad)\nconst fetchCurso=async()=>{try{const response=await fetch(\"\".concat(process.env.REACT_APP_API_URL,\"/api/courses/\").concat(id));if(!response.ok){throw new Error('Error al obtener los detalles del curso');}const data=await response.json();setCurso(data);// Guardamos el curso en el estado\n}catch(error){console.error('Error fetching course details:',error);setError('Error al cargar los detalles del curso');}};// Manejar el cambio de selección de respuesta\nconst handleOpcionChange=(preguntaId,opcionId)=>{setRespuestas({...respuestas,[preguntaId]:opcionId// Guardar la respuesta seleccionada para cada pregunta\n});};// Manejar el envío del examen\nconst handleSubmit=async()=>{const data={cursoId:id,respuestas,fecha:new Date().toISOString()// Fecha actual en formato ISO\n};try{const response=await fetch(\"\".concat(process.env.REACT_APP_API_URL,\"/api/evaluarExamen\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(response.ok){const result=await response.json();// Redirigir al usuario a la página de evaluación con el nombre del curso y especialidad en la URL\nif(curso){navigate(\"/evaluacion/\".concat(result.evaluacionId,\"?nombreCurso=\").concat(encodeURIComponent(curso.nombre),\"&especialidad=\").concat(encodeURIComponent(curso.especialidad)));}}else{console.error('Error en la evaluación del examen');}}catch(error){console.error('Error en el envío del examen:',error);}};if(loading){return/*#__PURE__*/_jsx(\"p\",{children:\"Cargando...\"});}if(error){return/*#__PURE__*/_jsx(\"p\",{children:error});}if(!preguntas||preguntas.length===0){return/*#__PURE__*/_jsx(\"p\",{children:\"No hay preguntas disponibles para este examen.\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"examen-container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Examen del Curso \",curso&&curso.nombre]}),\" \",/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[preguntas.map((pregunta,indexPregunta)=>/*#__PURE__*/_jsxs(\"div\",{className:\"pregunta\",children:[/*#__PURE__*/_jsx(\"h3\",{children:pregunta.pregunta}),/*#__PURE__*/_jsx(\"div\",{className:\"opciones\",children:pregunta.opciones.map((opcion,indexOpcion)=>/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"pregunta-\".concat(indexPregunta),value:indexOpcion,checked:respuestas[pregunta.id]===indexOpcion,onChange:()=>handleOpcionChange(pregunta.id,indexOpcion)}),opcion]})},indexOpcion))})]},indexPregunta)),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleSubmit,className:\"submit-examen-button\",children:\"Enviar Examen\"})]})]});}export default Examen;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsx","_jsx","jsxs","_jsxs","Examen","id","preguntas","setPreguntas","respuestas","setRespuestas","curso","setCurso","loading","setLoading","error","setError","navigate","fetchPreguntas","fetchCurso","response","fetch","concat","process","env","REACT_APP_API_URL","ok","Error","data","json","console","handleOpcionChange","preguntaId","opcionId","handleSubmit","cursoId","fecha","Date","toISOString","method","headers","body","JSON","stringify","result","evaluacionId","encodeURIComponent","nombre","especialidad","children","length","className","onSubmit","map","pregunta","indexPregunta","opciones","opcion","indexOpcion","type","name","value","checked","onChange","onClick"],"sources":["C:/Users/HP/Desktop/Proyecto_Alexandro/Version hibrida (local-web)/silent-class/src/components/Exam.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // Usamos useNavigate para redirigir\r\nimport './Examen.css';\r\n\r\nfunction Examen() {\r\n  const { id } = useParams(); // Obtener el ID del curso desde la URL\r\n  const [preguntas, setPreguntas] = useState([]); // Estado para las preguntas del examen\r\n  const [respuestas, setRespuestas] = useState({}); // Estado para las respuestas del usuario\r\n  const [curso, setCurso] = useState(null); // Estado para el curso (nombre y especialidad)\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate(); // Para redirigir después de enviar el examen\r\n\r\n  useEffect(() => {\r\n    fetchPreguntas(); // Cargar las preguntas al montar el componente\r\n    fetchCurso(); // Cargar la información del curso (nombre y especialidad)\r\n  }, [id]);\r\n\r\n  // Obtener las preguntas del examen\r\n  const fetchPreguntas = async () => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/examen/${id}`);\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener las preguntas del examen');\r\n      }\r\n      const data = await response.json();\r\n      setPreguntas(data.preguntas || []);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching exam questions:', error);\r\n      setError('Error al cargar las preguntas fsdfsfffd del examen');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Obtener la información del curso (nombre y especialidad)\r\n  const fetchCurso = async () => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/courses/${id}`);\r\n      if (!response.ok) {\r\n        throw new Error('Error al obtener los detalles del curso');\r\n      }\r\n      const data = await response.json();\r\n      setCurso(data); // Guardamos el curso en el estado\r\n    } catch (error) {\r\n      console.error('Error fetching course details:', error);\r\n      setError('Error al cargar los detalles del curso');\r\n    }\r\n  };\r\n\r\n  // Manejar el cambio de selección de respuesta\r\n  const handleOpcionChange = (preguntaId, opcionId) => {\r\n    setRespuestas({\r\n      ...respuestas,\r\n      [preguntaId]: opcionId, // Guardar la respuesta seleccionada para cada pregunta\r\n    });\r\n  };\r\n\r\n  // Manejar el envío del examen\r\n  const handleSubmit = async () => {\r\n    const data = {\r\n      cursoId: id,\r\n      respuestas,\r\n      fecha: new Date().toISOString(), // Fecha actual en formato ISO\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/evaluarExamen`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        // Redirigir al usuario a la página de evaluación con el nombre del curso y especialidad en la URL\r\n        if (curso) {\r\n          navigate(`/evaluacion/${result.evaluacionId}?nombreCurso=${encodeURIComponent(curso.nombre)}&especialidad=${encodeURIComponent(curso.especialidad)}`);\r\n        }\r\n      } else {\r\n        console.error('Error en la evaluación del examen');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en el envío del examen:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Cargando...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  if (!preguntas || preguntas.length === 0) {\r\n    return <p>No hay preguntas disponibles para este examen.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"examen-container\">\r\n      <h2>Examen del Curso {curso && curso.nombre}</h2> {/* Mostramos el nombre del curso si está disponible */}\r\n      <form onSubmit={handleSubmit}>\r\n        {preguntas.map((pregunta, indexPregunta) => (\r\n          <div key={indexPregunta} className=\"pregunta\">\r\n            <h3>{pregunta.pregunta}</h3>\r\n            <div className=\"opciones\">\r\n              {pregunta.opciones.map((opcion, indexOpcion) => (\r\n                <div key={indexOpcion}>\r\n                  <label>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name={`pregunta-${indexPregunta}`}\r\n                      value={indexOpcion}\r\n                      checked={respuestas[pregunta.id] === indexOpcion}\r\n                      onChange={() => handleOpcionChange(pregunta.id, indexOpcion)}\r\n                    />\r\n                    {opcion}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <button type=\"button\" onClick={handleSubmit} className=\"submit-examen-button\">\r\n          Enviar Examen\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Examen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}